





































































































































































































































































































































   


















































   



   











































































































































































































































































































































































.686 
.XMM 
.MODEL flat, c 
ASSUME fs:_DATA 
.CODE




        















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        dr_fpu_exception_init PROC

        fninit
        push     01f80h
        ldmxcsr  dword ptr [esp]
        pop      eax
        ret
        dr_fpu_exception_init ENDP







        get_stack_ptr PROC

        mov      eax, esp
        add      eax, 4 
        ret
        get_stack_ptr ENDP







        load_dynamo PROC

    





























        
        mov      edi, edi























        
        pop      ebx 
        
        pop      eax 
         
 push eax 
 call ebx 

        
        cmp      eax, 0
        jne      load_dynamo_success
        pop      ebx 
        pop      ebx 
        jmp      load_dynamo_failure
load_dynamo_success:
        
        pop      ebx 
        
        
        pop      edi 
         
 push edi 
 push eax 
 call ebx 
        cmp      eax, 0
        je       load_dynamo_failure

        
        jmp      eax
        


        load_dynamo ENDP











        load_dynamo_failure PROC

        



        mov      eax, [((3*4)) + esp] 
        mov      ebx, [(9*4) + esp] 
        
        mov      [-4 + eax], ebx
        


        popa
        popfd
        
        
        
        mov      esp, [-(9*4) + ((3*4)) + esp]
        jmp      dword ptr [-4 + esp]      

        ret
        load_dynamo_failure ENDP
        




















        switch_modes_and_load PROC

        
        mov      eax, dword ptr [4 + esp]
        mov      ecx, dword ptr [8 + esp]
        mov      edx, dword ptr [12 + esp]
        
        push     ebx
        
        DB 0eah 

        DD offset sml_transfer_to_64
        DB 033h
        DB 000h 

sml_transfer_to_64:
    


       





        DB 04ch 
 DB 08bh 
 DB 0cah 
  
        DB 04ch 
 DB 08bh 
 DB 0c1h 
  
        push     0               
        lea      edx, dword ptr [esp] 
        xor      ecx, ecx        
        
        DB 041h 
 push     esp 
        DB 041h 
 push     ebp 
        DB 041h 
 push     esi 
        DB 041h 
 push     edi 
        
        mov      ebx, esp        
        sub      esp, 32         
        and      esp, 0fffffff0h 
        call     eax
        mov      esp, ebx        
        
        DB 041h 
 pop      edi 
        DB 041h 
 pop      esi 
        DB 041h 
 pop      ebp 
        DB 041h 
 pop      esp 
        
        push     offset sml_return_to_32  
        mov      dword ptr [esp + 4], 023h 
        jmp      fword ptr [esp]
sml_return_to_32:
        add      esp, 16         
        pop      ebx             
        ret                      
        switch_modes_and_load ENDP






        switch_modes_and_call PROC

        mov      eax, dword ptr [4 + esp]
        mov      ecx, dword ptr [8 + esp]
        mov      edx, dword ptr [12 + esp]
        
        push     ebx
        mov      ebx, dword ptr [16 + esp]
        
        DB 0eah 

        DD offset smc_transfer_to_64
        DB 033h
        DB 000h 

smc_transfer_to_64:
    


        
        DB 041h 
 push     esp 
        DB 041h 
 push     ebp 
        DB 041h 
 push     esi 
        DB 041h 
 push     edi 
        DB 044h 
 mov      eax, ebx 
        
        mov      ebx, esp        
        sub      esp, 32         
        and      esp, 0fffffff0h 
        call     eax             
        mov      esp, ebx        
        
        DB 041h 
 pop      edi 
        DB 041h 
 pop      esi 
        DB 041h 
 pop      ebp 
        DB 041h 
 pop      esp 
        
        push     offset smc_return_to_32  
        mov      dword ptr [esp + 4], 023h 
        jmp      fword ptr [esp]
smc_return_to_32:
        add      esp, 8          
        pop      ebx             
        ret                      
        switch_modes_and_call ENDP







        dr_invoke_x64_routine PROC EXPORT

        
        mov      eax, esp
        
        push     ebx
        
        DB 0eah 

        DD offset inv64_transfer_to_64
        DB 033h
        DB 000h 

inv64_transfer_to_64:
    


        





        DB 041h 
 push     esp 
        DB 041h 
 push     ebp 
        DB 041h 
 push     esi 
        DB 041h 
 push     edi 
        
        mov      ebx, esp        
        sub      esp, 32         
        mov      ecx, dword ptr [12 + eax] 
        sub      ecx, 4
        jle      inv64_arg_copy_done
        shl      ecx, 3          
        sub      esp, ecx        
        and      esp, 0fffffff0h 
        
        mov      ecx, dword ptr [12 + eax] 
        cmp      ecx, 0
        je       inv64_arg_copy_done
inv64_arg_copy_loop:
        mov      edx, dword ptr [12 + 4*ecx + eax] 
        



        DB 048h 
 DB 063h 
 DB 0d2h 
  
        DB 048h 
  
        mov      dword ptr [-8 + 8*ecx + esp], edx
        sub      ecx, 1 
        jnz      inv64_arg_copy_loop
inv64_arg_copy_done:
        
        mov      ecx, dword ptr [12 + eax] 
        cmp      ecx, 4
        jl       inv64_arg_lt4
        mov      edx, dword ptr [12 + 4*4 + eax] 
        DB 04ch 
 DB 063h 
 DB 0cah 
 
inv64_arg_lt4:
        cmp      ecx, 3
        jl       inv64_arg_lt3
        mov      edx, dword ptr [12 + 4*3 + eax] 
        DB 04ch 
 DB 063h 
 DB 0c2h 
 
inv64_arg_lt3:
        cmp      ecx, 2
        jl       inv64_arg_lt2
        mov      edx, dword ptr [12 + 4*2 + eax] 
        DB 048h 
 DB 063h 
 DB 0d2h 
  
inv64_arg_lt2:
        cmp      ecx, 1
        jl       inv64_arg_lt1
        mov      ecx, dword ptr [12 + 4*1 + eax] 
        DB 048h 
 DB 063h 
 DB 0c9h 
  
inv64_arg_lt1:
        
        DB 048h 
  
        mov      eax, dword ptr [4 + eax] 
        DB 048h 
 call     eax
        
        DB 048h 
 mov      edx, eax
        DB 048h 
 shr      edx, 32
        mov      esp, ebx        
        
        DB 041h 
 pop      edi 
        DB 041h 
 pop      esi 
        DB 041h 
 pop      ebp 
        DB 041h 
 pop      esp 
        
        push     offset inv64_return_to_32  
        mov      dword ptr [esp + 4], 023h 
        jmp      fword ptr [esp]
inv64_return_to_32:
        add      esp, 8          
        pop      ebx             
        ret                      
        dr_invoke_x64_routine ENDP













































END

